on:
  push:
    branches:
      - master

  pull_request:
    branches:
      - master
    types:
      - labeled
      - opened
      - closed
      - reopened
      - synchronize

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Setup Test Environment
        run: docker-compose up -d

      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 5.0.102

      - name: Install Dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Test
        run: dotnet test --no-restore

      - name: Teardown Test Environment
        run: docker-compose down

  release:
    if: ${{ github.event.pull_request.merged == true && contains(github.event.pull_request.labels.*.name, 'release') }}
    runs-on: ubuntu-latest
    steps:
      - run: echo 'This is a release'
#      - uses: actions/checkout@v2
#
#      - name: Setup Dotnet
#        uses: actions/setup-dotnet@v1
#        with:
#          dotnet-version: 5.0.102
#
#      - name: Publish NuGet
#        id: publish_nuget
#        uses: brandedoutcast/publish-nuget@v2
#        with:
#          PACKAGE_NAME: BasinFramework
#          PROJECT_FILE_PATH: Basin/Basin.csproj
#          VERSION_FILE_PATH: Basin/Basin.csproj
#          VERSION_REGEX: <PackageVersion>(.*?)</PackageVersion>
#          TAG_COMMIT: true
#          TAG_FORMAT: v*
#          NUGET_KEY: ${{ secrets.NUGET_API_KEY }}
#
#      - name: Create Release
#        if: steps.publish_nuget.outputs.VERSION != null
#        id: create_release
#        uses: actions/create-release@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          tag_name: ${{ steps.publish_nuget.outputs.VERSION }}
#          release_name: ${{ steps.publish_nuget.outputs.VERSION }}
#          body_path: RELEASE_NOTES.md
#
#      - name: Upload Nuget
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }}
#          asset_path: ${{ steps.publish_nuget.outputs.PACKAGE_PATH }}
#          asset_name: ${{ steps.publish_nuget.outputs.PACKAGE_NAME }}
#          asset_content_type: application/nupkg
